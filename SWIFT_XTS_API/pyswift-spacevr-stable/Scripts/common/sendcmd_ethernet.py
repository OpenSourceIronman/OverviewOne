#!/usr/bin/env python
import sys
import time
import logging
import argparse
import traceback
sys.path.insert(1, "../../Packages")
import swiftradio
from swiftradio.clients import SwiftRadioEthernet

__author__ = "Steve Alvarado"
__email__ = "alvarado@tethers.com"
__company__ = "Tethers Unlimited Inc."
__status__ = "Development"
__date__ = "created: 11/24/15"
__version__ = '1.0.1'

def print_execution_summary(command_data, output_name=None, dtype='raw'):
	"""
	Description:
	Parameters:
	Return:
	"""
	cmderr_val = None
	data_pkts_rcvd = 0
	status_pkts_rcvd = 0
	error_list = list()
	invparam_error_msgs = {	2:"required parameter value missing",
							3:"parameter value formatted incorrectly according to parameter type",
						 	4:"parameter value unknown relative to definition. (i.e. undefined stropt)",
						 	5:"parameter value is less than the required minimum value",
						 	6:"parameter value is greater than the required maximum value"}

	data_found = False

	print "\n[Received Data]"

	# print only command data specified
	if output_name is not None:
		data = swiftradio.tools.find_command_data_by_name(command_data, output_name, dtype, all_matches=True)
		if data is not None:
			if type(data) is list:
				for data_item in data:
					print "{} = {}".format(output_name, data_item)
			else:
				print "{} = {}".format(output_name, data)
			data_found = True

	# print all command data
	else:
		for name, data in command_data.items():

			# the print tag will be command data hash
			if name != "_error":
				if type(data) is list:
					for data_item in data:
						if type(name) is str:
							print "{} = {}".format(name, data_item)
						else:
							formatted_data = swiftradio.tools.convert_raw(data_item, dtype)
							print "0x{}: {}".format(hex(name)[2:].upper().zfill(4), formatted_data)
				else:
					if type(name) is str:
						print "{} = {}".format(name, data)
					else:
						formatted_data = swiftradio.tools.convert_raw(data, dtype)
						print "0x{}: {}".format(hex(name)[2:].upper().zfill(4), formatted_data)

				data_found = True

	if data_found == False:
		print "None"

	# display any error codes generated by the command execution
	if command_data["_error"] is not None:
		print "\n[Error Report]"

		# iterate through error_list and print error info for each item in list
		error_code = command_data["_error"]["code"]
		error_type = command_data["_error"]["type"]

		print "error: {}".format(error_type)
		print "code: {}".format(error_code)

		if error_code in invparam_error_msgs:
			print "description: {}".format( invparam_error_msgs[error_code] )

	print ""

if __name__ == "__main__":
	try:
		radio = None

		# define command line arguments
		parser = argparse.ArgumentParser(add_help=True)
		parser.add_argument("command", type=str,
							help = "name of command to cache (i.e. 'rxdis')")
		parser.add_argument("ip", type=str,
							help = "IPv4 ip address of the radio to connect to (setting this will bypass the Network Discover function)")
		parser.add_argument("-t", "--trace", type=int, default=0, choices=[0,1,2,3], metavar="TRACELEVEL",
							help = "sets trace level for outputting SwiftRadio actions")
		parser.add_argument("-o", "--timeout", type=int, default = 5, choices=range(0, 120), metavar = "TIMEOUTSECS",
							help = "command timeout in seconds. (defaults to 5 seconds)")
		parser.add_argument("-n", "--output_name", type=str,
							help = "name of any command output data. (only data corresponding to this name will be displayed)")
		parser.add_argument("-z", "--datatype", type=str, default="raw", choices=["uint", "int", "float", "string", "str", "raw"],
							help = "format to display received command data")
		args = parser.parse_args()

		print "--"
		print "Send Radio Command (Ethernet)"
		print "Version {}".format(__version__)
		print "Tethers Unlimited Inc. (c)"

		# [1] - Create Swift Radio Interface
		radio = SwiftRadioEthernet(args.ip, trace=args.trace )				# internal instance trace level for debugging

		# [2] - Connect to Radio
		radio.connect()

		if radio == -1:
			raise RuntimeError("error connecting to radio. Exiting Program...\n\n")

		# [4] - Download Command
		print "\nExecuting '{}' command...".format(args.command),
		exe_data = radio.execute_command( args.command )
		print "done."

		print_execution_summary(exe_data, args.output_name, args.datatype)

		# [5] - Disconnect from Radio
		radio.disconnect()

	except KeyboardInterrupt:
		print "\n**Keyboard Interrupt Detected**\n"
		print "exiting program..."
		if(radio != None):
			radio.disconnect()

	except:
		traceback.print_exc()
		if(radio != None):
			radio.disconnect()
